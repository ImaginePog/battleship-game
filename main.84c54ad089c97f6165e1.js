(()=>{"use strict";const t=(()=>{const t={};function e(e){t[e]=document.querySelector(e)}return{load:function(){e(".singleplayer-form"),e(".game-container"),e(".info-container"),e(".player1-header"),e(".player1-board"),e(".player2-header"),e(".player2-board"),e(".controls-container"),e(".end-container"),e(".winner-text"),e(".player-message"),e(".restart-btn")},getElement:function(e){if(t[e])return t[e];console.error("Element not loaded or wrong query")}}})(),e=(()=>{function e(t){const e=t.target;if(!t.target.classList.contains("game-cell"))return;const s=t.target.closest(".game-board");o.respondCoords({x:Number(e.dataset.x),y:Number(e.dataset.y),player:s.dataset.player})}function s(t){t.preventDefault(),o.changeAxis()}function i(t){const e=t.target;if(!t.target.classList.contains("game-cell"))return;const s=t.target.closest(".game-board");o.highlightHover({x:Number(e.dataset.x),y:Number(e.dataset.y),player:s.dataset.player})}function r(e){e.preventDefault();const s=e.target.elements[0].value;e.target.reset(),e.target.classList.add("hidden"),t.getElement(".game-container").classList.remove("hidden"),o.startSingleplayer(s)}function a(e){t.getElement(".end-container").classList.add("hidden"),o.restart(),t.getElement(".game-container").classList.remove("hidden")}return{listen:function(){t.getElement(".singleplayer-form").addEventListener("submit",r);const n=t.getElement(".game-container");n.addEventListener("click",e),n.addEventListener("mouseover",i),n.addEventListener("contextmenu",s),t.getElement(".restart-btn").addEventListener("click",a)}}})();class s{constructor(){this.width=10,this.height=10,this.ships=[],this.board=this.createBoard()}createBoard(){const t=[];for(let e=0;e<this.height;++e){const e=[];for(let t=0;t<this.width;++t)e.push(" ");t.push(e)}return t}getSpace(t,e){return this.board[e][t]}setSpace(t,e,s){this.board[e][t]=s}getAdjacentSpaces(t,e){const s=[],i={x:t-1,y:e};i.x>=0&&s.push(i);const r={x:t+1,y:e};r.x<this.width&&s.push(r);const a={x:t,y:e-1};a.y>=0&&s.push(a);const n={x:t,y:e+1};return n.y<this.height&&s.push(n),s}placeShip(t){for(let e=0;e<t.occupied.length;++e){const s=t.occupied[e],i=this.getAdjacentSpaces(s.x,s.y);for(let t=0;t<i.length;++t)if(" "!==this.getSpace(i[t].x,i[t].y))return!1;if(" "!==this.getSpace(s.x,s.y))return!1}return t.occupied.forEach((e=>{this.setSpace(e.x,e.y,t.token)})),this.ships.push(t),!0}takeShot(t,e){const s=this.getSpace(t,e);if(" "===s)return this.setSpace(t,e,"X"),!1;if("X"===s||"O"===s)return-1;for(let s=0;s<this.ships.length;++s){if(this.ships[s].occupied.findIndex((s=>s.x==t&&s.y==e))>=0)return this.setSpace(t,e,"O"),this.ships[s].hit(),!0}}areAllSunk(){let t=!0;for(let e=0;e<this.ships.length;++e)if(!this.ships[e].sunk){t=!1;break}return t}}class i{constructor(t,e){this.name=t,this.gameboard=new s,this.drawBoard=e}placeShip(t){return this.gameboard.placeShip(t)}shoot(t,e){if(this.enemyBoard)return this.enemyBoard.takeShot(t,e)}lost(){return this.gameboard.areAllSunk()}render(t,e){this.drawBoard.innerText="";for(let s=0;s<this.gameboard.height;s++){const i=document.createElement("div");i.classList.add("game-row");for(let r=0;r<this.gameboard.width;r++){const a=document.createElement("cell");if(a.classList.add("game-cell"),a.dataset.x=r,a.dataset.y=s,e){e.findIndex((t=>t.x==r&&t.y==s))>=0&&a.classList.add("highlight-cell")}switch(this.gameboard.getSpace(r,s)){case" ":a.classList.add("empty-cell");break;case"X":a.classList.add("missed-cell");break;case"P":case"D":case"B":case"C":case"S":t&&a.classList.add("ship-cell");break;case"O":a.classList.add("shot-cell")}i.appendChild(a)}this.drawBoard.appendChild(i)}}}class r extends i{constructor(t){super("Computer",t),this.targets=[],this.shotRecord=[],this.lastHit=null}getRandomCoord(){return{x:Math.floor(Math.random()*this.enemyBoard.width),y:Math.floor(Math.random()*this.enemyBoard.height)}}hasShot(t){return-1!=this.shotRecord.findIndex((e=>e.x==t.x&&e.y==t.y))}getShootCoord(){let t,e;do{e=this.getRandomCoord(),t=this.hasShot(e)}while(t);return e}shoot(){if(!this.enemyBoard)return;let t;0===this.targets.length?(this.lastHit=null,t=this.getShootCoord()):t=this.targets.pop();let e=this.enemyBoard.takeShot(t.x,t.y);if(1==e){let e=[],s=null;this.lastHit&&(t.x-this.lastHit.x==0&&(s="y",this.targets=this.targets.filter((t=>t.x-this.lastHit.x==0))),t.y-this.lastHit.y==0&&(s="x",this.targets=this.targets.filter((t=>t.y-this.lastHit.y==0)))),"x"==s?(e.push({x:t.x+1,y:t.y}),e.push({x:t.x-1,y:t.y})):"y"==s?(e.push({x:t.x,y:t.y+1}),e.push({x:t.x,y:t.y-1})):(e.push({x:t.x+1,y:t.y}),e.push({x:t.x-1,y:t.y}),e.push({x:t.x,y:t.y+1}),e.push({x:t.x,y:t.y-1})),e.forEach((t=>{t.x>=0&&t.x<this.enemyBoard.width&&t.y>=0&&t.y<this.enemyBoard.height&&!this.hasShot(t)&&this.targets.push(t)})),this.lastHit=t}return this.shotRecord.push(t),e}}const a={Carrier:5,Battle:4,Destroyer:3,Submarine:3,Patrol:2};class n{constructor(t,e,s){this.type=t||"Carrier",this.token=this.type[0],this.length=this.health=a[this.type],this.position=e||{x:0,y:0},this.axis=s||"x",this.occupied=this.calculateOcuppied()}calculateOcuppied(){const t=[this.position];for(let e=1;e<this.length;++e){const e=t[t.length-1];"x"===this.axis?t.push({x:e.x+1,y:e.y}):t.push({x:e.x,y:e.y+1})}return t}hit(){this.sunk||this.health--}get sunk(){return this.health<=0}}class h{constructor(e,s,a){const n=t.getElement(".player1-board");n.innerText="",this.player1=new i(s,n);const h=t.getElement(".player2-board");h.innerText="",this.player2="singleplayer"==e?new r(h):new i(a,h),this.width=10,this.height=10,this.player1.enemyBoard=this.player2.gameboard,this.player2.enemyBoard=this.player1.gameboard,this.currentPlayer=this.player1,this.otherPlayer=this.player2,this.turn=0,this.shipsToPlace=["Carrier","Battle","Patrol","Destroyer","Submarine"],this.currentPlacement={shipType:0,axis:"x"},this.infoOutput=t.getElement(".info-container"),this.state="placement",t.getElement(".controls-container").innerText="Click to place ships | Right click to rotate axis",this.updatePlacementInfo(),this.currentPlayer.render()}updateInfo(t){this.infoOutput.innerText=t}updatePlacementInfo(){let t=`Currently placing: ${this.shipsToPlace[this.currentPlacement.shipType]} ship`;"x"===this.currentPlacement.axis?t+=" Horizontally":t+=" Vertically",this.updateInfo(t)}hasEnded(){return this.otherPlayer.lost()}nextTurn(){if(this.hasEnded())return this.state="over",t.getElement(".controls-container").innerText="",this.updateInfo(""),void o.end(this.currentPlayer,this.turn);this.turn=(this.turn+1)%2,0==this.turn?(this.state="choice",this.updateInfo("Choose a square to shoot at captain!"),this.currentPlayer=this.player1,this.otherPlayer=this.player2):(this.state="computer",this.currentPlayer=this.player2,this.otherPlayer=this.player1),this.currentPlayer instanceof r&&this.playComputer()}calibrate(t){let e=!1;for(let s=0;s<t.occupied.length;++s){if(t.occupied[s].x>this.width-1){e=!0;break}if(t.occupied[s].y>this.height-1){e=!0;break}}if(e){const e={x:0,y:0};"x"===t.axis?(e.x=t.position.x-1,e.y=t.position.y):(e.x=t.position.x,e.y=t.position.y-1),t=this.calibrate(new n(t.type,e,t.axis))}return t}playComputer(){setTimeout((()=>{this.updateInfo("The computer is making its move...brace!!"),setTimeout((()=>{1==this.currentPlayer.shoot()?this.updateInfo("Oh no! It hit our ship!"):this.updateInfo("Phew! It missed!"),this.render(),setTimeout((()=>{this.nextTurn()}),1e3)}),1e3)}),1e3)}play(t){if(t.player==this.turn+1)return;const e=this.currentPlayer.shoot(t.x,t.y);if(1==e)this.updateInfo("Nice shot captain!!");else{if(-1===e)return void this.updateInfo("Already shot there captain...");this.updateInfo("Oh no! We missed!")}this.render(),this.nextTurn()}getRandomAxis(){return Math.random()>=.5?"x":"y"}getRandomCoords(){return{x:Math.floor(Math.random()*this.width),y:Math.floor(Math.random()*this.height)}}computerPlacement(){this.shipsToPlace.forEach((t=>{let e=!1;for(;!e;){let s=this.calibrate(new n(t,this.getRandomCoords(),this.getRandomAxis()));e=this.otherPlayer.placeShip(s)}}))}async place(){if(this.currentPlayer.placeShip(this.currentPlacement.ship))return this.currentPlacement.shipType++,this.updatePlacementInfo(),this.currentPlayer.render(),this.currentPlacement.shipType>=this.shipsToPlace.length?(this.computerPlacement(),this.state="choice",t.getElement(".controls-container").innerText="Click on enemy board to shoot",this.updateInfo("Sink their ships!!"),t.getElement(".game-container").classList.add("separate-boards"),void this.render()):void 0;alert("Ships cannot be placed on the same square or their adjacent squares")}highlightPlacement(t){let e=this.calibrate(new n(this.shipsToPlace[this.currentPlacement.shipType],{x:t.x,y:t.y},this.currentPlacement.axis));this.currentPlacement.ship=e,this.currentPlayer.render(!0,e.occupied)}highlightSquare(t){t.player!=this.turn+1&&this.otherPlayer.render(!1,[t])}highlight(t){"placement"===this.state?this.highlightPlacement(t):this.highlightSquare(t)}changeAxis(){"x"==this.currentPlacement.axis?this.currentPlacement.axis="y":this.currentPlacement.axis="x",this.updatePlacementInfo()}render(){this.player1.render(!0),this.player2.render(!1)}}const o=(()=>{let s;return{start:function(){t.load(),e.listen()},startSingleplayer:function(t){s=new h("singleplayer",t)},respondCoords:function(t){"placement"===s.state?function(t){s.place(t)}(t):"choice"===s.state&&function(t){s.play(t)}(t)},highlightHover:function(t){"computer"!==s.state&&s.highlight(t)},changeAxis:function(){"placement"===s.state&&s.changeAxis()},end:function(e,s){t.getElement(".game-container").classList.add("hidden");const i=t.getElement(".end-container");t.getElement(".winner-text").innerText=e.name+" wins!!";const r=t.getElement(".player-message");r.innerText=s?"Better luck next time!!":"Congratulations!!",i.classList.remove("hidden")},restart:function(){s=new h("singleplayer",s.player1.name)}}})();o.start()})();